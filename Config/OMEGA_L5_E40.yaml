NBODY: 2
FILE_PREFIX: 'OMEGA_L5_E40_analysis'

PDG: 3334
EINT: 40
MULTIPLICITY: 0.14
BRATIO: 0.433
T: 0.218
SIGMA: 0.0025
MASS_WINDOW: 0.01
NBINS: 40
PT_BINS: [0, 3.]

SIG_MODELS: ['gauss'] #, 'd-gauss']
BKG_MODELS: ['pol1', 'pol2']

EFF_RANGE_SYST: [0.05, 0.05]

BDT_EFFICIENCY: [0.80, 1., 0.02] ##min, max ,step

MC_PATH: ../Data/OMEGA_L5_E40/fntSig_OMEGA_L5_E40.root
BKG_PATH: ../Data/OMEGA_L5_E40/fntBkg_OMEGA_L5_E40_train.root
DATA_PATH: ['../Data/OMEGA_L5_E40/fntBkg_OMEGA_L5_E40.root']
EVENT_PATH: ['../Data/OMEGA_L5_E40/merged_ev.root']

PRESELECTION: cosp > 0.9999 and pt<3
STD_SELECTION: pt<3 and dist > 4 and cosp > 0.99999


XGBOOST_PARAMS:
  # general parameters
  silent: 1 # print message (useful to understand whats happening)
  n_jobs: 8 # number of available threads
  # learning task parameters
  objective: binary:logistic
  random_state: 42
  eval_metric: auc
  tree_method: hist

HYPERPARAMS:
  max_depth: 7
  learning_rate: 0.167
  n_estimators: 83
  gamma: 0.525
  min_child_weight: 9.82
  subsample: 0.89
  colsample_bytree: 0.64
  seed : 42

HYPERPARAMS_RANGE: #TODO: check if it works without tuples
  # booster parameters
  max_depth: !!python/tuple [5, 20] # defines the maOMEGAmum depth of a single tree (regularization)
  learning_rate: !!python/tuple [0.01, 0.3] # learning rate
  n_estimators: !!python/tuple [50, 500] # number of boosting trees
  gamma: !!python/tuple [0.3, 1.1] # specifies the minimum loss reduction required to make a split
  min_child_weight: !!python/tuple [1, 12]
  subsample: !!python/tuple [0.5, 0.9] # denotes the fraction of observations to be randomly samples for each tree
  colsample_bytree: !!python/tuple [0.5, 0.9] # denotes the fraction of columns to be randomly samples for each tree
  # # lambda: (0,10]  # L2 regularization term on weights
  # # alpha: (0,10]  # L1 regularization term on weight

TRAINING_COLUMNS: 
  - cosp
  - cospD
  - dist
  - bxy
#  - dca
  - dcaD
  - bxyD
#  - distD