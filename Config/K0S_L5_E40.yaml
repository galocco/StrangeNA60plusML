NBODY: 2
FILE_PREFIX: 'K0S_L5_E40_analysis'

PDG: 310
EINT: 40
MULTIPLICITY: 39.15
BRATIO: 0.692
T: 0.22745
SIGMA: 0.003
MASS_WINDOW: 0.04

#PT_BINS: [0,0.125,0.25,0.375,0.5,0.625,0.75,0.875,1.0,1.125,1.25,1.375,1.5,1.625,1.75,1.875,2.0,2.125,2.25,2.375,2.5,2.625,2.75,2.875, 3.0]
PT_BINS: [0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.,1.2,1.4,1.6,1.8,2.0,2.25,2.5,2.75, 3.0]

BKG_MODELS: ['expo', 'pol1', 'pol2']

BDT_EFFICIENCY: [0.20, 1., 0.001] ##min, max ,step

#MC_PATH: ../Data/K0S_L5_E40/fntSig_K0S_L5_E40_test.root
#BKG_PATH: ../Data/K0S_L5_E40/fntBkg_K0S_L5_E40_9.root
#DATA_PATH: ['../Data/K0S_L5_E40/fntBkg_K0S_L5_E40.root']
#EVENT_PATH: ['../Data/K0S_L5_E40/merged_ev.root']

MC_PATH: ../Data/K0S_L5_E40/fntSig_L5_E40_train.root
BKG_PATH: ../Data/K0S_L5_E40/fntBkg_K0S_L5_E40_train.root
DATA_PATH:
- ../Data/K0S_L5_E40/fntBkg_K0S_L5_E40_data.root
EVENT_PATH:
- ../Data/K0S_L5_E40/merged_ev.root

PRESELECTION: cosp > 0.9999 and pt<3
STD_SELECTION: pt<3 and dist > 5 and cosp > 0.999988 and dcaD < 0.007 and dca<0.015 and cospD > 0.999

GAUSS: True

XGBOOST_PARAMS:
  # general parameters
  silent: 1 # print message (useful to understand whats happening)
  n_jobs: 8 # number of available threads
  # learning task parameters
  objective: binary:logistic
  random_state: 42
  eval_metric: auc
  tree_method: hist

HYPERPARAMS:
  max_depth: 7
  learning_rate: 0.167
  n_estimators: 83
  gamma: 0.525
  min_child_weight: 9.82
  subsample: 0.89
  colsample_bytree: 0.64
  seed : 42

HYPERPARAMS_RANGE: #TODO: check if it works without tuples
  # booster parameters
  max_depth: !!python/tuple [5, 20] # defines the maximum depth of a single tree (regularization)
  learning_rate: !!python/tuple [0.01, 0.3] # learning rate
  n_estimators: !!python/tuple [50, 500] # number of boosting trees
  gamma: !!python/tuple [0.3, 1.1] # specifies the minimum loss reduction required to make a split
  min_child_weight: !!python/tuple [1, 12]
  subsample: !!python/tuple [0.5, 0.9] # denotes the fraction of observations to be randomly samples for each tree
  colsample_bytree: !!python/tuple [0.5, 0.9] # denotes the fraction of columns to be randomly samples for each tree
  # # lambda: (0,10]  # L2 regularization term on weights
  # # alpha: (0,10]  # L1 regularization term on weight

TRAINING_COLUMNS: 
  - cosp
  - dist
  - dca
  - d0prod
  - rapidity